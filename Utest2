package cleanbubblesort;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BubbleSorterTest {

    private final BubbleSorter<Integer> intSorter = new BubbleSorter<>();
    private final BubbleSorter<Double> doubleSorter = new BubbleSorter<>();
    private final BubbleSorter<String> stringSorter = new BubbleSorter<>();

    // --- validateArray() ---
    @Test
    void validateArrayShouldReturnFalseForNullArray() {
        assertFalse(intSorter.validateArray(null));
    }

    @Test
    void validateArrayShouldReturnFalseForEmptyArray() {
        assertFalse(intSorter.validateArray(new Integer[]{}));
    }

    @Test
    void validateArrayShouldReturnTrueForValidArray() {
        assertTrue(intSorter.validateArray(new Integer[]{1, 2}));
    }

    // --- Sorting Integers ---
    @Test
    void sortsIntAscending() {
        Integer[] input = {5, 3, 8, 4, 6};
        intSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Integer[]{3, 4, 5, 6, 8}, input);
    }

    @Test
    void sortsIntDescending() {
        Integer[] input = {5, 3, 8, 4, 6};
        intSorter.bubbleSort(input, "descending");
        assertArrayEquals(new Integer[]{8, 6, 5, 4, 3}, input);
    }

    @Test
    void sortsIntAlreadySortedAscending() {
        Integer[] input = {1, 2, 3};
        intSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Integer[]{1, 2, 3}, input);
    }

    @Test
    void sortsIntAllEqual() {
        Integer[] input = {4, 4, 4, 4};
        intSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Integer[]{4, 4, 4, 4}, input);
    }

    @Test
    void sortsIntWithNegativeNumbers() {
        Integer[] input = {-1, 3, -5, 2, 0};
        intSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Integer[]{-5, -1, 0, 2, 3}, input);
    }

    @Test
    void sortsIntDescendingEnumOrder() {
        Integer[] input = {10, 5, 20, 15};
        intSorter.bubbleSort(input, BubbleSorter.SortOrder.DESCENDING);
        assertArrayEquals(new Integer[]{20, 15, 10, 5}, input);
    }

    @Test
    void handlesNullOrderTextDefaultsToAscending() {
        Integer[] input = {3, 1, 2};
        intSorter.bubbleSort(input, (String) null);
        assertArrayEquals(new Integer[]{1, 2, 3}, input);
    }

    @Test
    void handlesUnknownOrderTextAsAscending() {
        Integer[] input = {4, 1, 3, 2};
        intSorter.bubbleSort(input, "unknown");
        assertArrayEquals(new Integer[]{1, 2, 3, 4}, input);
    }

    // --- Sorting Doubles ---
    @Test
    void sortsDoubleAscending() {
        Double[] input = {5.0, 3.0, 8.0, 4.0, 6.0};
        doubleSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Double[]{3.0, 4.0, 5.0, 6.0, 8.0}, input);
    }

    @Test
    void sortsDoubleDescending() {
        Double[] input = {5.0, 3.0, 8.0, 4.0, 6.0};
        doubleSorter.bubbleSort(input, "descending");
        assertArrayEquals(new Double[]{8.0, 6.0, 5.0, 4.0, 3.0}, input);
    }

    @Test
    void sortsDoubleWithNegativeValues() {
        Double[] input = {-3.0, 0.0, 2.0, -1.0, 1.0};
        doubleSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Double[]{-3.0, -1.0, 0.0, 1.0, 2.0}, input);
    }

    @Test
    void sortsDoubleSingleElement() {
        Double[] input = {42.0};
        doubleSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new Double[]{42.0}, input);
    }

    // --- Sorting Strings ---
    @Test
    void sortsStringAscendingAlphabetical() {
        String[] input = {"banana", "apple", "cherry"};
        stringSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new String[]{"apple", "banana", "cherry"}, input);
    }

    @Test
    void sortsStringDescendingAlphabetical() {
        String[] input = {"banana", "apple", "cherry"};
        stringSorter.bubbleSort(input, "descending");
        assertArrayEquals(new String[]{"cherry", "banana", "apple"}, input);
    }

    @Test
    void sortsStringCaseSensitive() {
        String[] input = {"a", "B", "c"};
        stringSorter.bubbleSort(input, "ascending");
        assertArrayEquals(new String[]{"B", "a", "c"}, input);
    }

    // --- Edge cases ---
    @Test
    void handlesArrayWithSingleElement() {
        Integer[] input = {1};
        intSorter.bubbleSort(input, "descending");
        assertArrayEquals(new Integer[]{1}, input);
    }

    @Test
    void handlesAlreadySortedDescendingArray() {
        Integer[] input = {9, 7, 5, 3, 1};
        intSorter.bubbleSort(input, "descending");
        assertArrayEquals(new Integer[]{9, 7, 5, 3, 1}, input);
    }

    @Test
    void handlesArrayWithNullOrderAndEmptyCheck() {
        Integer[] input = {9, 3, 5};
        intSorter.bubbleSort(input, (String) null);
        assertArrayEquals(new Integer[]{3, 5, 9}, input);
    }
}
